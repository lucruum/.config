#!/usr/bin/env perl

use open qw(:std :utf8);
use strict;
use utf8;
use warnings;

use Cwd qw(abs_path);
use File::Basename;
use File::Find;
use File::Temp;
use FindBin qw($Dir);
use Getopt::Long qw(:config bundling);
use JSON::PP;
use Pod::Usage;

utf8::decode $Dir;
utf8::decode $_ foreach @ARGV;

my $json = JSON::PP->new->utf8(0);

sub fatal(;$) {
    my ($message) = @_;

    print STDERR "$message\n" if defined $message;
    exit 1;
}

sub quote(_) {
    local ($_) = @_;

    # См. https://github.com/git/git/blob/master/quote.c: `sq_quote_buf_pretty`
    return "''" unless $_;
    return "'" . s/([!'])/'\\$1'/gr . "'" if /[^_\-,:.@\/^+=\w]/;
    return $_;
}

sub type(_) {
    local ($_) = @_;

    `type @{[quote]} > /dev/null 2> /dev/null`;
    return !$?;
}

sub syntax_exec($@) {
    my ($query, @paths) = @_;

    return {} unless @paths;

    my $query_file = File::Temp->new;
    binmode $query_file, "utf8";
    print $query_file $query;

    my $command = "tree-sitter query";
    $command .= " --config-path=" . quote "$Dir/config.json";
    $command .= " " . quote $query_file;
    $command .= " " . quote foreach @paths;

    chomp(my @output = `$command`);
    die "tree-sitter: Exited abnormally with exit code @{[$? >> 8]}" if $?;

    my @table;
    foreach (@output) {
        if (/^    capture: (\d+ - )?([-.\w]+), start: \((\d+), (\d+)\), end: \((\d+), (\d+)\)(, text: `(.*)`)?$/) {
            my $name = $2;
            my $start = [$3 + 1, $4 + 1];
            my $end = [$5 + 1, $6 + 1];
            my $text = $8 // do {
                my $path = $table[-1]{path};
                open my $file, "<", "$path" or die "open: $!";
                my @lines = <$file>;
                @lines = @lines[$3..$5];
                $lines[0] = substr $lines[0], $4;
                $lines[-1] = substr $lines[-1], 0, $6;
                join "", @lines;
            };
            push $table[-1]{patterns}[-1]{captures}->@*, {
                name => $name,
                start => $start,
                end => $end,
                text => $text,
            };
        } elsif (/^  pattern: (\d+)$/) {
            push $table[-1]{patterns}->@*, {
                index => $1,
                captures => [],
            };
        } else {
            push @table, {
                path => $_,
                patterns => [],
            };
        }
    }

    return \@table;
}

sub json_exec($$) {
    my ($query, $table) = @_;

    my $table_file = File::Temp->new;
    binmode $table_file, "utf8";
    print $table_file $json->encode($table);

    my $command = "ya tool jq";
    $command .= " " . quote $query;
    $command .= " " . quote $table_file;

    my $output = `$command`;
    die "jq: Exited abnormally with exit code @{[$? >> 8]}" if $?;

    return $json->decode($output);
}

=pod

=head1 SYNOPSIS

folkvangr [OPTION]... [--] PATH...

=head1 OPTIONS

=over

=item -h, --help

Display this help text and exit

=back

=over

=item -I DIRECTORY

Add directory to the list of operation search paths

=back

=over

=item -W WARNING

Enable the specified warning

=back

=head1 WARNINGS

Each of these warning options also has a negative form beginning with `-Wno-` to turn off warnings

=over

=item -Wlib-operation

Issue a warning when an operation is already defined in `vh3.lib`.
This warning helps to clean up the code from redundant operations after running `ya tool vh3 import` with `--no-lib-operations` flag.
Enabled by default

=back

=over

=item -Wdefined-operation

Issue a warning when an operation is already defined somewhere in the include paths.
Enabled by default

=back

=cut

my $help = 0;
my %warnings = ("lib-operation" => 1,
                "defined-operation" => 1);
my @include_paths;
GetOptions "h|help" => \$help,
           "I=s" => \@include_paths,
           "W=s" => sub {
               my ($name, $value) = @_;
               my $enabled = $value !~ /^no-/;
               $value =~ s/^no-//;
               $warnings{$value} = $enabled; }
           or fatal;

pod2usage -verbose => 99, -sections => ".*" if $help;

foreach (@include_paths) {
    fatal "Not a directory: $_" if -e && !-d;
    fatal "No such file or directory: $_" unless -e;
    $_ = abs_path $_;
}

foreach (keys %warnings) {
    my @known = qw(lib-operation defined-operation);
    my $known = join "|", @known;
    fatal "Unknown warning value: $_" unless /^($known)$/;
}

fatal "Option not specified: PATH" unless @ARGV;
my @paths = @ARGV;
foreach (@paths) {
    fatal "Not a file: $_" if -e && !-f;
    fatal "No such file or directory: $_" unless -e;
    $_ = abs_path $_;
}

fatal "git: not found" if !type "git";
fatal "make not found" if !type "make";
fatal "arc: not found\n"
    . "\n"
    . "For more information refer to the documentation:\n"
    . "    https://docs.yandex-team.ru/devtools/intro/quick-start-guide#arc-setup"
    if !type "arc";
fatal "ya: not found\n"
    . "\n"
    . "For more information refer to the documentation:\n"
    . "    https://docs.yandex-team.ru/devtools/intro/quick-start-guide#ya-setup"
    if !type "ya";
fatal "tree-sitter: not found\n"
    . "\n"
    . "Install the binary by running one of the following commands:\n"
    . "    - `apt install tree-sitter-cli`\n"
    . "    - `brew install tree-sitter`\n"
    . "    - `nix-env -iA nixpkgs.tree-sitter`\n"
    . "    - `cargo install --locked tree-sitter-cli`\n"
    . "    - `npm install tree-sitter-cli`"
    if !type "tree-sitter";

unless (-f "$Dir/config.json") {
    open my $file, ">", "$Dir/config.json" or die "open: $!";
    print $file $json->encode({
        "parser-directories" => [
            $Dir,
        ]
    });
}
foreach ("tree-sitter/tree-sitter-python") {
    my $parser = basename $_;
    my $dir = "$Dir/$parser";
    my $lib = "$dir/lib$parser.so";
    system "git", "clone", "https://github.com/$_" unless -d $dir;
    die "git: Exited abnormally with code @{[$? >> 8]}" if $?;
    system "make", "-C", $dir unless -f $lib;
    die "make: Exited abnormally with code @{[$? >> 8]}" if $?;
}

my $arcadia_root = $ENV{ARCADIA} ||
                   $ENV{ARCADIA_PATH} ||
                   $ENV{ARCADIA_ROOT} ||
                   `arc root 2> /dev/null`;
chomp $arcadia_root;
fatal "Not an arc repository" unless $arcadia_root;

my @warnings;

if ($warnings{"lib-operation"}) {
    my @lib_operations;
    find {
        wanted => sub { push @lib_operations, $_ if -f $_ && /\.py$/ },
        no_chdir => 1 },
        "$arcadia_root/nirvana/vh3/src/vh3/lib";
    my $lib_operations = syntax_exec '
        (module
            (decorated_definition
                (decorator
                    (call
                        function: (_) @d
                        (#match? @d "vh3.decorator.(composite_|external_)?operation")))
                definition:
                    (function_definition
                        name: (_) @f
                        (#match? @f "^[^_]"))))',
        @lib_operations;
    $lib_operations = json_exec '
        map({(.patterns[].captures[] | select(.name == "f") | .text): .path}) |
        add',
        $lib_operations;

    my $my_operations = syntax_exec '
        (decorated_definition
            (decorator
                (call
                    function: (_) @d
                    (#match? @d "vh3.decorator.(composite_|external_)?operation")))
            definition:
                (function_definition
                    name: (_) @f))',
        @paths;
    $my_operations = json_exec '
        map(
            .path as $path |
            .patterns[].captures[] | select(.name == "f") |
            {path: $path, line: .start[0], column: .start[1], operation: .text}
        )',
        $my_operations;

    foreach ($my_operations->@*) {
        my $path = $_->{path};
        my $line = $_->{line};
        my $column = $_->{column};
        my $operation = $_->{operation};

        if (exists $lib_operations->{$operation}) {
            my $module = $lib_operations->{$operation};
            $module =~ s,^$arcadia_root/nirvana/vh3/src/,,;
            $module =~ s,\.py$,,;
            $module =~ s,/,.,g;

            push @warnings, {
                path => $path,
                line => $line,
                column => $column,
                message => "Operation `$operation` is already defined in `$module`",
                code => "lib-operation"};
        }
    }
}

if ($warnings{"defined-operation"}) {
    my @defined_operations;
    find {
        wanted => sub { push @defined_operations, $_ if -f $_ && /\.py$/ },
        no_chdir => 1 },
        @include_paths;
    my $defined_operations = syntax_exec '
        (module
            (decorated_definition
                (decorator
                    (call
                        function: (_) @d
                        (#match? @d "vh3.decorator.(composite_|external_)?operation")))
                definition:
                    (function_definition
                        name: (_) @f
                        (#match? @f "^[^_]"))))',
        @defined_operations;
    $defined_operations = json_exec '
        map({(.patterns[].captures[] | select(.name == "f") | .text): .path}) |
        add',
        $defined_operations;

    my $my_operations = syntax_exec '
        (decorated_definition
            (decorator
                (call
                    function: (_) @d
                    (#match? @d "vh3.decorator.(composite_|external_)?operation")))
            definition:
                (function_definition
                    name: (_) @f))',
        @paths;
    $my_operations = json_exec '
        map(
            .path as $path |
            .patterns[].captures[] | select(.name == "f") |
            {path: $path, line: .start[0], column: .start[1], operation: .text}
        )',
        $my_operations;

    foreach ($my_operations->@*) {
        my $path = $_->{path};
        my $line = $_->{line};
        my $column = $_->{column};
        my $operation = $_->{operation};

        my $defined_path = $defined_operations->{$operation};
        if (defined $defined_path && $defined_path ne $path) {
            my $module = $defined_path;
            $module =~ s,^$arcadia_root/,,;
            $module =~ s,\.py$,,;
            $module =~ s,/,.,g;

            push @warnings, {
                path => $path,
                line => $line,
                column => $column,
                message => "Operation `$operation` is already defined in `$module`",
                code => "defined-operation"};
        }
    }
}

@warnings = sort {
    $a->{path} cmp $b->{path} ||
    $a->{line} <=> $b->{line} ||
    $a->{column} <=> $b->{column} ||
    $a->{code} cmp $b->{code} }
    @warnings;
print "$_->{path}:$_->{line}:$_->{column}: $_->{message} [-W$_->{code}]\n"
foreach @warnings;
