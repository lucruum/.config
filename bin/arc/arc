#!/usr/bin/env bash

#
# Примеси
#

arc_--() {
    "$ARC_PRIMARY_PATH" "$@"
}

arc_cane() {
    arc ci -a --amend --no-edit
}

arc_diff() {
    # Патч, созданный `arc diff`'ом без флага `--git` воспринимается `git apply`'ем как неправильный
    # Также delta некорректно разбирает такой патч: каждый файл отображается перемещённым
    arc -- diff --git "$@"
}

arc_show() {
    # См. комментарий к `arc_diff`'у
    arc -- show --git "$@"
}

arc_delta() {
    arc diff "$@" | delta -s --wrap-max-lines=unlimited
}

arc_tip() {
    arc show "$@" | delta -s --wrap-max-lines=unlimited
}

arc_apply() {
    git -C "$(arc root)" apply --no-index "$@"
}

arc_drop() {
    local commit=${1:-HEAD}

    ARC_SEQUENCE_EDITOR='sed -i "1 s/pick/drop/"' \
    arc rebase -i $commit~1
}

arc_edit() {
    local commit=${1:-HEAD}

    ARC_SEQUENCE_EDITOR='sed -i "1 s/pick/edit/"' \
    arc rebase -i $commit~1
}

arc_reword() {
    local commit=${1:-HEAD}

    ARC_SEQUENCE_EDITOR='sed -i "1 s/pick/reword/"' \
    arc rebase -i $commit~1
}

arc_swap() {
    local commit=${1:-HEAD}

    ARC_SEQUENCE_EDITOR='sed -i "1h;1d;2G"' \
    arc rebase -i $commit~2
}

arc_shelve() {
    local message=$(arc show --json | jq -r '.[0].commits[0].message')

    if [[ ! -z "$(arc st -s)" ]]; then
        arc stash push -um "Working tree changes: $message"
    fi

    arc reset --soft HEAD~1
    arc stash push -m "Commit changes: $message"
}

arc_unshelve() {
    local message=$(arc show stash@{0} --json         \
                    | jq -r '.[0].commits[0].message' \
                    | perl -pe 's/^(.*?): (.*?): // if $. == 1')
    arc stash pop --index
    arc commit -am "$message"

    if [[ -z "$(arc stash list)" ]]; then
        return
    fi
    local changes=$(arc show stash@{0} --json         \
                    | jq -r '.[0].commits[0].message' \
                    | head -1                         \
                    | perl -pe 's/^(.*?): (.*?): .*$/\2/')
    if [[ "$changes" == "Working tree changes" ]]; then
        arc stash pop --index
    fi
}

#
# Вспомогательные функции
#

reflect() {
    # Внутри тела примеси можно разместить специальные конструкции вида
    # `: attribute-name "Attribute value"`
    #
    # Они не влияют на работу программы и позволяют задать произвольно сложные
    # свойства примеси, которые в дальнейшем могут быть использованы, например,
    # для генерации документации или CLI-интерфейса

    each_mixin() {
        declare -F     \
        | cut -b 12-   \
        | grep "^arc_" \
        | cut -b 5-
    }

    each_attr() {
        local func=arc_$2

        declare -f $func \
        | awk '{ if ($1 == ":") print $2 }'
    }

    extract() {
        local attr=$2
        local func=arc_$4

        declare -f $func                                        \
        | sed "s/: $attr /die() { echo \"\$@\"; exit; }; die /" \
        | sed "\$ s/$/; $func/"                                 \
        | bash                                                  \
        | jq -rsR
    }

    for func in $(each_mixin); do
        for attr in $(each_attr of: $func); do
            jq -n                                                \
                --arg key "$attr"                                \
                --arg value "$(extract attr: $attr from: $func)" \
                '{$key: $value}'
        done | jq -s --arg func $func 'add | . // {} | {$func: .}'
    done | jq -s add
}

#
# Точка входа
#

ensure_arc_primary_path_is_set() {
    local paths=$(which -a arc   \
                  | grep -v "$0" \
                  | grep -v "$(realpath "$0")")
    if [[ -z "$paths" ]]; then
        echo "arc: primary program 'arc' not found"
        echo "Consider visiting documentation page at 'https://docs.yandex-team.ru/devtools/intro/quick-start-guide' for more details"
        exit 1
    fi

    local suggested_path=$(echo "$paths" | head -1)
    if [[ -z "$ARC_PRIMARY_PATH" ]]; then
        echo 'arc: path to primary program `ARC_PRIMARY_PATH` is not set'
        echo "Consider adding \`export ARC_PRIMARY_PATH=$suggested_path\` to your shell configuration file"
        exit 1
    fi
}

arc() {
    if declare -F arc_$1 > /dev/null; then
        arc_"$@"
        return
    fi

    arc -- "$@"
}

main() {
    ensure_arc_primary_path_is_set

    arc "$@"
}

main "$@"
