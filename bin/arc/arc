#!/usr/bin/env bash

#
# Примеси
#

arc---() {
    "$ARC_PRIMARY_PATH" "$@"
}

arc-cane() {
    arc ci -a --amend --no-edit
}

arc-diff() {
    # Патч, созданный `arc diff`'ом без флага `--git` воспринимается `git apply`'ем как неправильный
    # Также delta некорректно разбирает такой патч: каждый файл отображается перемещённым
    arc -- diff --git "$@"
}

arc-show() {
    # См. комментарий к `arc-diff`'у
    arc -- show --git "$@"
}

arc-delta() {
    arc diff "$@" | delta -s --wrap-max-lines=unlimited
}

arc-tip() {
    arc show "$@" | delta -s --wrap-max-lines=unlimited
}

arc-apply() {
    git -C "$(arc root)" apply --no-index "$@"
}

arc-drop() {
    local commit=${1:-HEAD}

    ARC_SEQUENCE_EDITOR='sed -i "1 s/pick/drop/"' \
    arc rebase -i $commit~1
}

arc-edit() {
    local commit=${1:-HEAD}

    ARC_SEQUENCE_EDITOR='sed -i "1 s/pick/edit/"' \
    arc rebase -i $commit~1
}

arc-reword() {
    local commit=${1:-HEAD}

    ARC_SEQUENCE_EDITOR='sed -i "1 s/pick/reword/"' \
    arc rebase -i $commit~1
}

arc-swap() {
    local commit=${1:-HEAD}

    ARC_SEQUENCE_EDITOR='sed -i "1h;1d;2G"' \
    arc rebase -i $commit~2
}

arc-shelve() {
    local message=$(arc show --json | jq -r '.[0].commits[0].message')

    if [[ ! -z "$(arc st -s)" ]]; then
        arc stash push -um "Working tree changes: $message"
    fi

    arc reset --soft HEAD~1
    arc stash push -m "Commit changes: $message"
}

arc-unshelve() {
    local message=$(arc show stash@{0} --json         \
                    | jq -r '.[0].commits[0].message' \
                    | perl -pe 's/^(.*?): (.*?): // if $. == 1')
    arc stash pop --index
    arc commit -am "$message"

    if [[ -z "$(arc stash list)" ]]; then
        return
    fi
    local changes=$(arc show stash@{0} --json         \
                    | jq -r '.[0].commits[0].message' \
                    | head -1                         \
                    | perl -pe 's/^(.*?): (.*?): .*$/\2/')
    if [[ "$changes" == "Working tree changes" ]]; then
        arc stash pop --index
    fi
}

#
# Атрибуты
#
# Внутри тела примеси можно разместить специальные конструкции вида
# `: attribute-name "Attribute value"`
#
# Они не влияют на работу программы и позволяют задать произвольно сложные
# свойства примеси, которые в дальнейшем могут быть использованы, например,
# для генерации документации или CLI-интерфейса
#

each-mixin() {
    declare -F     \
    | cut -b 12-   \
    | grep "^arc-" \
    | cut -b 5-
}

each-attr() {
    local mixin=$2

    mixin=arc-$mixin

    declare -f $mixin \
    | awk '{ if ($1 == ":") print $2 }'
}

collect-values() {
    local attr=$2
    local mixin=$4
    local into=$6

    mixin=arc-$mixin

    each-value() {
        declare -f $mixin                    \
        | perl -pe 's/^\s*: '$attr' /die() {
            for it in "\$@"; do
                echo -n "\$it" | jq -sR
            done
            exit
        }; die /'                            \
        | sed "\$ s/$/; $mixin/"             \
        | bash
    }

    while IFS= read -r; do
        local entry=$(echo "$REPLY" | jq -r)
        eval "$into+=(${entry@Q})"
    done <<< "$(each-value)"
}

#
# Точка входа
#

ensure-arc-primary-path-is-set() {
    local paths=$(which -a arc   \
                  | grep -v "$0" \
                  | grep -v "$(realpath "$0")")
    if [[ -z "$paths" ]]; then
        echo "arc: primary program 'arc' not found"
        echo "Consider visiting documentation page at 'https://docs.yandex-team.ru/devtools/intro/quick-start-guide' for more details"
        exit 1
    fi

    local suggested_path=$(echo "$paths" | head -1)
    if [[ -z "$ARC_PRIMARY_PATH" ]]; then
        echo 'arc: path to primary program `ARC_PRIMARY_PATH` is not set'
        echo "Consider adding \`export ARC_PRIMARY_PATH=$suggested_path\` to your shell configuration file"
        exit 1
    fi
}

arc() {
    if declare -F arc-$1 > /dev/null; then
        arc-"$@"
        return
    fi

    arc -- "$@"
}

main() {
    ensure-arc-primary-path-is-set

    arc "$@"
}

main "$@"
